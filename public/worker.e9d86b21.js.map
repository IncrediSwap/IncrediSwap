{"version":3,"sources":["../node_modules/threads/dist/observable.js","../node_modules/threads/observable.js","../node_modules/threads/dist/worker/implementation.browser.js","../node_modules/threads/dist/worker/index.js","../node_modules/threads/worker.js","../../../src/crypto/random/index.ts","../../src/wasm/barretenberg_wasm.ts","../../src/wasm/worker_pool.ts","../../src/wasm/index.ts","../../src/wasm/worker.ts"],"names":[],"mappings":"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","file":"worker.e9d86b21.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst observable_fns_1 = require(\"observable-fns\");\nexports.Observable = observable_fns_1.Observable;\nconst $observers = Symbol(\"observers\");\n/**\n * Observable subject. Implements the Observable interface, but also exposes\n * the `next()`, `error()`, `complete()` methods to initiate observable\n * updates \"from the outside\".\n *\n * Use `Observable.from(subject)` to derive an observable that proxies all\n * values, errors and the completion raised on this subject, but does not\n * expose the `next()`, `error()`, `complete()` methods.\n */\nclass Subject extends observable_fns_1.Observable {\n    constructor() {\n        super(observer => {\n            this[$observers] = [\n                ...(this[$observers] || []),\n                observer\n            ];\n            const unsubscribe = () => {\n                this[$observers] = this[$observers].filter(someObserver => someObserver !== observer);\n            };\n            return unsubscribe;\n        });\n        this[$observers] = [];\n    }\n    complete() {\n        this[$observers].forEach(observer => observer.complete());\n    }\n    error(error) {\n        this[$observers].forEach(observer => observer.error(error));\n    }\n    next(value) {\n        this[$observers].forEach(observer => observer.next(value));\n    }\n}\nexports.Subject = Subject;\n","module.exports = require(\"./dist/observable\")\n","\"use strict\";\n/// <reference lib=\"dom\" />\n// tslint:disable no-shadowed-variable\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isWorkerRuntime = function isWorkerRuntime() {\n    return typeof self !== \"undefined\" && self.postMessage ? true : false;\n};\nconst postMessageToMaster = function postMessageToMaster(data, transferList) {\n    self.postMessage(data, transferList);\n};\nconst subscribeToMasterMessages = function subscribeToMasterMessages(onMessage) {\n    const messageHandler = (messageEvent) => {\n        onMessage(messageEvent.data);\n    };\n    const unsubscribe = () => {\n        self.removeEventListener(\"message\", messageHandler);\n    };\n    self.addEventListener(\"message\", messageHandler);\n    return unsubscribe;\n};\nexports.default = {\n    isWorkerRuntime,\n    postMessageToMaster,\n    subscribeToMasterMessages\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_observable_1 = __importDefault(require(\"is-observable\"));\nconst common_1 = require(\"../common\");\nconst transferable_1 = require(\"../transferable\");\nconst messages_1 = require(\"../types/messages\");\nconst implementation_1 = __importDefault(require(\"./implementation\"));\nvar common_2 = require(\"../common\");\nexports.registerSerializer = common_2.registerSerializer;\nvar transferable_2 = require(\"../transferable\");\nexports.Transfer = transferable_2.Transfer;\nlet exposeCalled = false;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable_1.default(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return transferable_1.isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.error,\n        uid,\n        error: common_1.serialize(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: messages_1.WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    implementation_1.default.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: messages_1.WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    implementation_1.default.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: messages_1.WorkerMessageType.uncaughtError,\n            error: common_1.serialize(error)\n        };\n        implementation_1.default.postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it occured while \" +\n            \"reporting an uncaught error already. Latest error:\", subError);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            syncResult.subscribe(value => postJobResultMessage(jobUID, false, common_1.serialize(value)), error => postJobErrorMessage(jobUID, common_1.serialize(error)), () => postJobResultMessage(jobUID, true));\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, common_1.serialize(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!implementation_1.default.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(common_1.deserialize));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(common_1.deserialize));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n}\nexports.expose = expose;\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n","module.exports = require(\"./dist/worker/index\")\n",null,null,null,null,null]}